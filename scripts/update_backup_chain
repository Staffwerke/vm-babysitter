#!/bin/bash
#------------------------------------------------------------------------------
# Updates backup chains for VMs in SCHEDULED_BACKUPS_LIST,
# managing temporal RAM limits (when set) and powering on/off as necessary:
#------------------------------------------------------------------------------
functions_path="functions"
external_vars="/tmp/vm-babysit-vars"
logpath=${SCHEDULED_LOGPATH:-"/logs/scheduled-backups.log"}

#------------------------------------------------------------------------------
# Internal global variables and common functions are managed via this script:
source $functions_path

# And SCHEDULED_BACKUPS_LIST is loaded from file (written by the main script):
source $external_vars
#------------------------------------------------------------------------------

# Copies stdout and stderr to $logpath:
exec > >(tee -a $logpath) 2> >(tee -a $logpath >&2)

if [[ $ONGOING_BACKUP == false ]]; then

    # Only starts running the script if no other incremental backup task has been started:

    # Marks ONGOING_BACKUP as started externally, so the main process gets paused temporarily:
    ONGOING_BACKUP="true"

    sed -i -e "s/ONGOING_BACKUP=.*/ONGOING_BACKUP=\"$ONGOING_BACKUP\"/" $external_vars

    # If main script is performing a check, will enter into this loop:
    while [[ $ONGOING_CHECK = true ]]; do

        if [[ -z $messaged ]]; then

            # Message this once:
            echo ""
            echo "Scheduled backup execution will be delayed until ongoing checks had finished..."
            echo ""
            messaged=1
        fi
        sleep 1
        source $external_vars
    done

    echo "###############################################################################"
    echo "Scheduled Incremental Backup started at: $(date "+%Y-%m-%d %H:%M:%S")"

    if [[ ! -z ${SCHEDULED_BACKUPS_LIST[@]} ]]; then

        echo "Virtual machines: '${SCHEDULED_BACKUPS_LIST[@]}'"
        #echo "###############################################################################"

        i=0
        for domain in ${SCHEDULED_BACKUPS_LIST[@]}; do

            echo "___________________________________________________________________________________________________"
            echo ""
            original_ram_size=""
            memlimit_active="no"

            while true; do

                if [[ $(domain_state $domain) == running ]]; then

                    # Only when VM is running, attempts to perform an incremental backup:
                    echo "$domain: Starting incremental backup..."
                    do_backup_chain $domain "inc" $BACKUPS_MAIN_PATH $VIRTNBDBACKUP_ARGS

                    if [[ $? -eq 0 ]]; then

                        # Backup chain creation was successful!
                        backup_chain_success[$i]=$domain

                        #echo "$domain: Incremental backup successfully added to the backup chain"
                    else

                        # Failed to create a new backup chain:
                        backup_chain_failed[$i]=$domain

                        #echo "$domain: Failed to perform incremental backup. Read the logs above to determine the specific cause of fail)"
                    fi

                    if [[ ${domain_poweron_success[$i]} == $domain ]]; then

                        # VM was previously shut off, revert to its previous state:
                        domain_shutdown $domain --nowait

                        if [[ $memlimit_active == yes ]]; then

                            # RAM was previously throttled. Reverting to its original values:
                            domain_setmem $domain $original_ram_size
                            echo "$domain: Reverted RAM size to its original setting of $original_ram_size KiB"
                        fi
                    fi

                    # To DO: Sync on remote endpoint when REMOTE_BACKUPS_MAIN_PATH is set and bring status.
                    if [[ ${backup_chain_success[$i]} == $domain ]] && [[ ! -z $REMOTE_BACKUPS_MAIN_PATH ]]; then

                        # Incremental backup was successful and remote endpoint is (correctly) set,
                        # attempts to transfer changes via rsync:

                        echo "$domain: Syncing changes to remote endpoint..."

                        # Transfer backup using SSH_OPTS and RSYNC_ARGS:
                        rsync -a $RSYNC_ARGS -e "ssh $SSH_OPTS" $BACKUPS_MAIN_PATH/$domain/ $REMOTE_BACKUPS_MAIN_PATH/$domain/

                        rsync_status=$?

                        # Depending on success with rsync, will add the VM to $remote_success or $remote_fail
                        if [[ $rsync_status -eq 0 ]]; then

                            # When rsync exited normally, adds the VM to $remote_sync_success:
                            remote_sync_success[$i]+=$domain
                            echo "$domain: Incremental backup was successfully synced onto remote endpoint"
                        else

                            # Otherwise, adds the VM to $remote_sync_failed list:
                            remote_sync_failed[$i]+=$domain
                            echo "$domain: Failed to sync incremental backup onto remote endpoint with status $rsync_status"
                        fi
                    fi

                    # Exits the loop:
                    break

                else

                    # VM is presumably shut off. Will attempts to start it:

                    if [[ ! -z $RAM_LIMIT_PER_SCHED_BACKUP ]]; then

                        # And needs to check how much memory uses by default, throttling it if limits are established:

                        # Gets the original RAM size
                        original_ram_size=$(domain_getmem $domain --max)

                        # If the above value is greater than the established limit, sets the VM RAM temporarily to such limit:
                        if [[ $original_ram_size -gt $RAM_LIMIT_PER_SCHED_BACKUP ]]; then

                            memlimit_active="yes"
                            domain_setmem $domain $RAM_LIMIT_PER_SCHED_BACKUP

                            echo "$domain: RAM size temporarily throttled from $original_ram_size KiB to $RAM_LIMIT_PER_SCHED_BACKUP KiB for this task"
                        fi
                    fi

                    # Attempts to start the VM (awaits for VM's QEMU agent):
                    domain_start $domain
                    if [[ $? -eq 0 ]]; then

                        domain_poweron_success[$i]=$domain

                        # Restarts the loop to chech VM under changed conditions:
                        continue
                    else

                        # VM failed to power on. This is an abnormal situation:
                        echo "$domain: failed to start (backup chain update could not be performed)"
                        domain_poweron_failed[$i]=$domain

                        # Breaks the loop:
                        break
                    fi
                fi
            done

            # VM is unlisted from SCHEDULED_BACKUPS_LIST:
            unset SCHEDULED_BACKUPS_LIST[$i]

            # Increases the index to check the next VM:
            ((i++))
        done

        # Appends updated values
        # (as a string, since sed can't expand arrays correctly):
        SCHEDULED_BACKUPS_LIST="${backup_chain_success[@]}"

        CHECK_PATCH_LIST+=(${backup_chain_failed[@]})
        CHECK_PATCH_LIST="${CHECK_PATCH_LIST[@]}"

        FAILED_VMS_LIST+=(${domain_poweron_failed[@]})
        FAILED_VMS_LIST="${FAILED_VMS_LIST[@]}"

        ONGOING_BACKUP="false"

        # And updates them all at once:
        sed -i \
        -e "s/SCHEDULED_BACKUPS_LIST=.*/SCHEDULED_BACKUPS_LIST=($SCHEDULED_BACKUPS_LIST)/" \
        -e "s/CHECK_PATCH_LIST=.*/CHECK_PATCH_LIST=($CHECK_PATCH_LIST)/" \
        -e "s/FAILED_VMS_LIST=.*/FAILED_VMS_LIST=($FAILED_VMS_LIST)/" \
        -e "s/ONGOING_BACKUP=.*/ONGOING_BACKUP=\"$ONGOING_BACKUP\"/" \
        $external_vars

        # And shows the summary at the very end:

        echo "___________________________________________________________________________________________________"
        echo ""
        echo "Scheduled Incremental Backup Summary:"
        echo ""
        echo "Successful Backups (on schedule): ${backup_chain_success[@]:-"None"}"
        echo "Failed Backups (will be checked ASAP): ${backup_chain_failed[@]:-"None"}"
        echo "Failed Virtual machines (user action is required): ${domain_poweron_failed[@]:-"None"}"

        if [[ ! -z $REMOTE_BACKUPS_MAIN_PATH ]]; then

            # Only show remote stats when remote endppoint is set:
            echo "Synced onto remote endpoint: ${remote_sync_success[@]:-"None"}"
            echo "Failed to sync onto remote endpoint: ${remote_sync_failed[@]:-"None"}"
        fi

        if [[ -z ${backup_chain_failed[@]} ]] && [[ -z ${domain_poweron_failed[@]} ]]; then

            echo ""
            echo "ALL VMs WERE BACKED UP SUCCESSFULLY!"
        fi

        echo ""
        echo "Scheduled Incremental Backup ended at: $(date "+%Y-%m-%d %H:%M:%S")"
        echo ""

    else
        echo "No Virtual machines on schedule. Exited"
    fi
fi
