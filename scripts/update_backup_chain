#!/bin/bash
#------------------------------------------------------------------------------
# Updates backup chains for VMs in SCHEDULED_BACKUPS_LIST,
# managing temporal RAM limits (when set) and powering on/off as necessary:
#------------------------------------------------------------------------------

# NOTE:
# - Static variables are set declared in crontab
# - Dynamic variables are read and written onto $external_vars file

# Internal global variables and common functions are managed via this script:
source $functions_path

# And SCHEDULED_BACKUPS_LIST is loaded from file (written by the main script):
source $external_vars
#------------------------------------------------------------------------------

# Copies stdout and stderr to $MAIN_LOGPATH:
exec > >(tee -a $MAIN_LOGPATH) 2> >(tee -a $MAIN_LOGPATH >&2)

if [[ $ONGOING_BACKUP == false ]]; then

    # Only starts running the script if no other incremental backup task has been started:

    # Marks ONGOING_BACKUP as started externally, so the main process gets paused temporarily:
    ONGOING_BACKUP="true"

    sed -i -e "s/ONGOING_BACKUP=.*/ONGOING_BACKUP=\"$ONGOING_BACKUP\"/" $external_vars

    # If main script is performing a check, will enter into this loop:
    while [[ $ONGOING_CHECK = true ]]; do

        if [[ -z $messaged ]]; then

            # Message this once:
            echo ""
            echo "Scheduled backup execution will be delayed until ongoing checks had finished..."
            echo ""
            messaged=1
        fi
        sleep 1
        source $external_vars
    done

    echo "############################################################################################################"
    echo "Scheduled Incremental Backup started at: $(date "+%Y-%m-%d %H:%M:%S")"

    if [[ ! -z ${SCHEDULED_BACKUPS_LIST[@]} ]]; then

        [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "Backup chain update" "In progress for ${SCHEDULED_BACKUPS_LIST[@]}. Avoid to stop/restart this container until further notice"

        echo "Virtual machines: '${SCHEDULED_BACKUPS_LIST[@]}'"
        echo ""

        i=0
        for domain in ${SCHEDULED_BACKUPS_LIST[@]}; do

            original_ram_size=""
            memlimit_active="no"

            echo "____________________________________________________________________________________________________________"

            while true; do

                if [[ $(domain_state $domain) == running ]]; then

                    # Only when VM is running, attempts to perform an incremental backup:
                    do_backup_chain $domain "inc" $BACKUPS_MAIN_PATH $VIRTNBDBACKUP_ARGS
                    echo ""

                    if [[ $? -eq 0 ]]; then

                        # Backup chain creation was successful!
                        backup_chain_success[$i]=$domain

                    else

                        # Get last state for virtnbdbackup:
                        virtnbdbackup_failed_status=$?

                        # Failed to create a new backup chain:
                        backup_chain_failed[$i]=$domain

                    fi

                    if [[ ${domain_poweron_success[$i]} == $domain ]]; then

                        # VM was previously shut off, revert to its previous state:
                        domain_shutdown $domain --nowait

                        if [[ $memlimit_active == yes ]]; then

                            # RAM was previously throttled. Reverting to its original values:
                            domain_setmem "$domain" "$original_ram_size"

                            [[ $? -eq 0 ]] \
                                && echo "$domain: Reverted RAM size to its original setting of ${original_ram_size// / \/ } KiB" \
                                || echo "WARNING: Failed to revert $domain RAM size to its original setting!"
                        fi
                    fi

                    if [[ ${backup_chain_success[$i]} == $domain ]] && [[ ! -z $REMOTE_BACKUPS_MAIN_PATH ]]; then

                        # Incremental backup was successful and remote endpoint is (correctly) set,
                        # attempts to transfer changes via rsync:

                        echo "$domain: Syncing changes to remote endpoint..."

                        # Transfer backup using SSH_OPTS and RSYNC_ARGS:
                        rsync $RSYNC_ARGS -e "ssh $SSH_OPTS" $BACKUPS_MAIN_PATH/$domain/ $REMOTE_BACKUPS_MAIN_PATH/$domain/

                        # Depending on success with rsync, will add the VM to $remote_success or $remote_fail
                        if [[ $? -eq 0 ]]; then

                            # When rsync exited normally, adds the VM to $remote_sync_success:
                            remote_sync_success[$i]+=$domain
                            echo "$domain: Incremental backup was successfully synced onto remote endpoint"
                        else

                            # Get last state for virtnbdbackup:
                            rsync_failed_status=$?

                            # Otherwise, adds the VM to $remote_sync_failed list:
                            remote_sync_failed[$i]+=$domain
                            echo "$domain: Failed to sync incremental backup onto remote endpoint with status $rsync_status"
                        fi
                    fi

                    # Exits the loop:
                    break

                else
                    # VM is presumably shut off. Will attempts to start it:
                    if [[ ! -z $RAM_LIMIT_PER_SCHED_BACKUP ]]; then

                        # And needs to check how much memory uses by default, throttling it if limits are established:
                        if [[ $(domain_getmem $domain --max) -gt $RAM_LIMIT_PER_SCHED_BACKUP ]]; then

                            # If max value is greater than the established limit, sets the VM RAM temporarily to such limit:
                            memlimit_active="yes"

                            # Saves apart original RAM sizes:
                            original_ram_size=$(domain_getmem $domain)

                            # Applies temporal values (according user input, but values are grabbed from virsh in KiB):
                            domain_setmem "$domain" "$RAM_LIMIT_PER_SCHED_BACKUP"

                            [[ $? -eq 0 ]] \
                                && echo "$domain: RAM size temporarily throttled from ${original_ram_size// / \/ } to $RAM_LIMIT_PER_SCHED_BACKUP KiB for this task" \
                                || echo "WARNING: Failed to set $domain RAM size to user defined limit of $RAM_LIMIT_PER_SCHED_BACKUP KiB"
                        fi
                    fi

                    # Attempts to start the VM (awaits for VM's QEMU agent):
                    domain_start $domain
                    if [[ $? -eq 0 ]]; then

                        domain_poweron_success[$i]=$domain

                        # Restarts the loop to chech VM under changed conditions:
                        continue
                    else

                        # VM failed to power on. This is an abnormal situation:

                        # Get last state for virsh:
                        virsh_failed_status=$?

                        echo "$domain: Failed to start with virsh status: $virsh_failed_status (backup chain update could not be performed)"
                        domain_poweron_failed[$i]=$domain

                        # Breaks the loop:
                        break
                    fi
                fi
            done

            # Increases the index to check the next VM:
            ((i++))
        done

        # Appends updated values
        FAILED_VMS_LIST+=(${domain_poweron_failed[@]})
        FAILED_VMS_LIST+=(${backup_chain_failed[@]})

        FAILED_VMS_LIST="${FAILED_VMS_LIST[@]}"

        ONGOING_BACKUP="false"

        # Revert RESTARTED_SERVER mode if it was enabled and there were successful incremental backups:
        if [[ $RESTARTED_SERVER == true ]] && [[ ! -z ${backup_chain_success[@]} ]]; then

            RESTARTED_SERVER="false"
            echo "RESTARTED_SERVER mode successfully disabled"
        fi

        # And updates them all at once:
        sed -i \
        -e "s/FAILED_VMS_LIST=.*/FAILED_VMS_LIST=($FAILED_VMS_LIST)/" \
        -e "s/ONGOING_BACKUP=.*/ONGOING_BACKUP=\"$ONGOING_BACKUP\"/" \
        -e "s/RESTARTED_SERVER=.*/RESTARTED_SERVER=\"$RESTARTED_SERVER\"/" \
        $external_vars

        # And shows the summary at the very end:

        echo ""
        echo "____________________________________________________________________________________________________________"
        echo ""
        echo "Scheduled Incremental Backup Summary:"
        echo ""
        echo "Successful Backups: ${backup_chain_success[@]:-"None"}"
        echo "Failed Backups:     ${backup_chain_failed[@]:-"None"}"
        echo "Misbehaving VMs:    ${domain_poweron_failed[@]:-"None"}"

        if [[ ! -z $REMOTE_BACKUPS_MAIN_PATH ]]; then

            # Only show remote stats when remote endppoint is set:
            echo ""
            echo "Synced to remote mirror:      ${remote_sync_success[@]:-"None"}"
            echo "Failed sync to remote mirror: ${remote_sync_failed[@]:-"None"}"
        fi

        if [[ -z ${backup_chain_failed[@]} ]] && [[ -z ${domain_poweron_failed[@]} ]] && [[ -z ${remote_sync_failed[@]} ]]; then

            echo ""
            echo "All Backup Chains Updated!"

            [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "Backup chain update" "Success"

        elif [[ $(os_is_unraid) == yes ]]; then

            [[ ! -z ${domain_poweron_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Virsh failed (last status: $virsh_failed_status)" "Could not power on: ${domain_poweron_failed[@]}"

            [[ ! -z ${backup_chain_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Virtnbdbackup failed (last status: $virtnbdbackup_failed_status)" "Could not update backup chain(s) for: ${backup_chain_failed[@]}"

            [[ ! -z ${remote_sync_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Rsync failed (last status: $rsync_failed_status)" "Could not sync backup chain(s) of: ${remote_sync_failed[@]} (Will be re-attempted on next schedule)"
        fi

        echo ""
            echo "############################################################################################################"
        echo "Scheduled Incremental Backup ended at: $(date "+%Y-%m-%d %H:%M:%S")"
        echo ""

    else
        echo "No Virtual machines on schedule. Exited"
    fi
fi
