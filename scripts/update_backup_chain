#!/bin/bash
#------------------------------------------------------------------------------
# Updates backup chains for VMs in SCHEDULED_BACKUPS_LIST,
#------------------------------------------------------------------------------

# NOTE:
# - Static variables are set declared in crontab
# - Dynamic variables are read and written onto $external_vars file

# Internal global variables and common functions are managed via this script:
source $functions_path

# And SCHEDULED_BACKUPS_LIST is loaded from file (written by the main script):
source $external_vars
#------------------------------------------------------------------------------

if [[ $ONGOING_BACKUP == false ]]; then

    # Only starts running the script if no other incremental backup task has been started:

    # Marks ONGOING_BACKUP as started externally, so the main process gets paused temporarily:
    ONGOING_BACKUP="true"

    sed -i -e "s/ONGOING_BACKUP=.*/ONGOING_BACKUP=\"$ONGOING_BACKUP\"/" $external_vars

    # If main script is performing a check, will enter into this loop:
    while [[ $ONGOING_CHECK = true ]]; do

        if [[ -z $messaged ]]; then

            # Message this once:
            echo ""
            echo "Scheduled backup execution will be delayed until ongoing checks had finished..."
            echo ""
            messaged=1
        fi
        sleep 1
        source $external_vars
    done

    echo "############################################################################################################"
    echo "Scheduled Incremental Backup started at: $(date "+%Y-%m-%d %H:%M:%S")"

    if [[ ! -z ${SCHEDULED_BACKUPS_LIST[@]} ]]; then

        [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "Backup chain update" "In progress for ${SCHEDULED_BACKUPS_LIST[@]}. Avoid to stop/restart this container until further notice"

        echo "Virtual machines: '${SCHEDULED_BACKUPS_LIST[@]}'"
        echo ""

        i=0
        for domain in ${SCHEDULED_BACKUPS_LIST[@]}; do

            echo "____________________________________________________________________________________________________________"

            do_backup_chain $domain "inc" $LOCAL_BACKUP_PATH $VIRTNBDBACKUP_ARGS

            if [[ $? -eq 0 ]]; then

                # Backup chain creation was successful!
                backup_chain_success[$i]=$domain

            else

                # Get last state for virtnbdbackup:
                virtnbdbackup_failed_status=$?

                # Failed to create a new backup chain:
                backup_chain_failed[$i]=$domain

            fi

            if [[ ${backup_chain_success[$i]} == $domain ]] && [[ ! -z $RSYNC_BACKUP_PATH ]]; then

                # Incremental backup was successful and remote endpoint is (correctly) set,
                # attempts to transfer changes via rsync:

                echo "$domain: Syncing changes to remote endpoint..."

                # Transfer backup using SSH_OPTIONS and RSYNC_ARGS:
                rsync $RSYNC_ARGS -e "ssh $SSH_OPTIONS" $LOCAL_BACKUP_PATH/$domain/ $RSYNC_BACKUP_PATH/$domain/

                # Depending on success with rsync, will add the VM to $remote_success or $remote_fail
                if [[ $? -eq 0 ]]; then

                    # When rsync exited normally, adds the VM to $remote_sync_success:
                    remote_sync_success[$i]+=$domain
                    echo "$domain: Incremental backup was successfully synced onto remote endpoint"
                else

                    # Get last state for virtnbdbackup:
                    rsync_failed_status=$?

                    # Otherwise, adds the VM to $remote_sync_failed list:
                    remote_sync_failed[$i]+=$domain
                    echo "$domain: Failed to sync incremental backup onto remote endpoint with status $rsync_status"
                fi
            fi

            # Increases the index to check the next VM:
            ((i++))
        done

        # Appends updated values
        FAILED_VMS_LIST+=(${backup_chain_failed[@]})

        # Writes updated FAILED_VMS_LIST value as a string,
        # since sed can't expand arrays correctly:
        FAILED_VMS_LIST="${FAILED_VMS_LIST[@]}"

        ONGOING_BACKUP="false"

        # Revert RESTARTED_SERVER mode if it was enabled and there were successful incremental backups:
        if [[ $RESTARTED_SERVER == true ]] && [[ ! -z ${backup_chain_success[@]} ]]; then

            RESTARTED_SERVER="false"
            echo "RESTARTED_SERVER mode successfully disabled"
        fi

        # And updates them all at once:
        sed -i \
        -e "s/FAILED_VMS_LIST=.*/FAILED_VMS_LIST=($FAILED_VMS_LIST)/" \
        -e "s/ONGOING_BACKUP=.*/ONGOING_BACKUP=\"$ONGOING_BACKUP\"/" \
        -e "s/RESTARTED_SERVER=.*/RESTARTED_SERVER=\"$RESTARTED_SERVER\"/" \
        $external_vars

        # And shows the summary at the very end:

        echo ""
        echo "____________________________________________________________________________________________________________"
        echo ""
        echo "Scheduled Incremental Backup Summary:"
        echo ""
        echo "Successful Backups: ${backup_chain_success[@]:-"None"}"
        echo "Failed Backups:     ${backup_chain_failed[@]:-"None"}"

        if [[ ! -z $RSYNC_BACKUP_PATH ]]; then

            # Only show remote stats when remote endppoint is set:
            echo ""
            echo "Synced to remote mirror:      ${remote_sync_success[@]:-"None"}"
            echo "Failed sync to remote mirror: ${remote_sync_failed[@]:-"None"}"
        fi

        if [[ -z ${backup_chain_failed[@]} ]] && [[ -z ${domain_poweron_failed[@]} ]] && [[ -z ${remote_sync_failed[@]} ]]; then

            echo ""
            echo "All Backup Chains Updated!"

            [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "Backup chain update" "Success"

        elif [[ $(os_is_unraid) == yes ]]; then

            [[ ! -z ${backup_chain_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Virtnbdbackup failed (last status: $virtnbdbackup_failed_status)" "Could not update backup chain(s) for: ${backup_chain_failed[@]}"

            [[ ! -z ${remote_sync_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Rsync failed (last status: $rsync_failed_status)" "Could not sync backup chain(s) of: ${remote_sync_failed[@]} (Will be re-attempted on next schedule)"
        fi

        echo ""
            echo "############################################################################################################"
        echo "Scheduled Incremental Backup ended at: $(date "+%Y-%m-%d %H:%M:%S")"
        echo ""

    else
        echo "No Virtual machines on schedule. Exited"
    fi
fi
