#!/bin/bash

# Restores saved VM image(s) from a specific backup path, to a specific location.
# It can take an additional trailing parameter, which is the checkpoint as of existing at
# $full_backup_path/checkpoints (without the .xml extension.)

# -----------------------------------------------------------------------------

# Backup location
full_backup_path=$1

# Location to restore the backups:
full_restoration_path=$2

checkpoint_num="$3"

# Runs a volatile container that executes virtnbdbackup with specific options:
# -----------------------------------------------------------------------------
virtnbdbackup_docker_restore()
{

# Docker source image:
local src_image="adrianparilli/virtnbdbackup-docker:latest"

# Action Mode:
local action_mode=$1

# Common bind mounts for all Operating Systems:
local bind_mounts=" -v $full_backup_path:$full_backup_path -v $full_restoration_path:$full_restoration_path -v /var/tmp:/var/tmp"

# Filters kernel with matching string "Unraid" and pass specific mount points. By now, all other Operating systems are mounted in the same way:
[[ -n `uname  -r | grep -e "-Unraid$"` ]] && bind_mounts+=" -v /var/run:/run -v /var/lock:/run/lock" || bind_mounts+=" -v /run:/run"

# When $action_mode is "dump", messages / checkpoints aren't needed (only shows info about backup chain):
if [[ $action_mode == "restore" ]]; then

    # Main message about restoration:
    local restoration_message="INFO: Starting backup(s) restoration from $full_backup_path at $full_restoration_path"

    # Extra options passed to virtnbdbackup, and additional string to main message:
    [[ ! -z $checkpoint_num ]] && { options=" --until virtnbdbackup.$checkpoint_num"; restoration_message+=" (until checkpoint 'virtnbdbackup.$checkpoint_num')"; }

    # Notifies the user about the ongoing process:
    echo $restoration_message
    echo "This may take some time, or even look freezed..."
fi

# Runs Docker!
    docker run --rm --name vm-$action_name $docker_name $bind_mounts $src_image virtnbdrestore -i $full_backup_path -a $action_mode -o $full_restoration_path $options

}

# Main execution:
# -----------------------------------------------------------------------------

status=1

if [[ -d $full_backup_path ]] || [[ ! -z `ls -a $full_backup_path` ]]; then

    # Verifies $checkpoint_num was or not passed, and if so, if exists as valid checkpoint into the backup chain:
    if [[ -z $checkpoint_num ]] || [[ -a $full_backup_path/checkpoints/virtnbdbackup.$checkpoint_num.xml ]]; then

        # Shows info about the backup to be restored:
        virtnbdbackup_docker_restore "dump"

        status=$?
        if [[ $status -eq 0 ]];then

            # Asks for confirmation
            read -p "Do you want to RESTORE this backup at $full_restoration_path [yes/no]?: " key
            while true; do
                case $key in
                    yes)
                        # Restores the backup, (until $checkpoint_num if passed):
                        virtnbdbackup_docker_restore "restore"
                        status=$?
                        [[ $status == 0 ]] && message="INFO: virtnbdbackup finished successfully. Check $full_restoration_path for image files." || message="ERROR: virtnbdbackup exited with status $status. Read the logs above to determine the problem, and check $full_restoration_path in case of (incomplete) image files are still remaining."
                        break
                    ;;
                    no)
                        echo "INFO: No actions will be performed. (Aborted by the user)"
                        status=0
                        break
                    ;;
                    *)
                        read -p "Please, write 'yes' or 'no': " key
                    ;;
                esac
            done
        else
            message="ERROR: Unknown. Read logs above to determine the problem."
        fi

    else
        # Checkpoint was passed but doesn't exist in $backup_path/checkpoints:
        message="ERROR: Checkpoint number '$checkpoint_num' was not found in $full_backup_path/checkpoints (Hint: Only pass the checkpoint number you want to restore.) Aborted."
    fi

else
    # Backup Path does not exist or is empty:
    echo "ERROR: $full_backup_path doesn't exist or no backups were detected. Aborted."
fi

echo $message
exit $status
