#!/bin/bash

# NOTE:
# - Static variables are set declared in crontab
# - Dynamic variables are read and written onto $external_vars file

# Internal global variables and common functions are managed via this script:
source $functions_path

# And SCHEDULED_BACKUPS_LIST is loaded from file (written by the main script):
source $external_vars
#------------------------------------------------------------------------------

case $1 in

    --run-schedule)

        backup_action="Scheduled"

        # Virtnbdbackup mode is always auto:
        backup_mode="auto"

        # Processes initial backups list from SCHEDULED_BACKUPS_LIST:
        received_backups_list=(${SCHEDULED_BACKUPS_LIST[@]})
    ;;

    *)
        backup_action="On-demand"

        # Virtnbdbackup mode is always auto (subject to change in future versions):
        backup_mode="auto"

        # Processes initial backups list from input:
        received_backups_list=($@)
    ;;
esac

echo ""
echo "############################################################################################################"
echo "$backup_action backup started at: $(date "+%Y-%m-%d %H:%M:%S")"

# Checks all VMs before to be processed, discarding deleted VMs:
for item in ${received_backups_list[@]}; do
    if [[ $(domain_exists $item) == yes ]]; then

        # Add the VM to the main list:
        backups_list+=($item)

    else
        # Create a separated list of 'lost' VMs, and prompt about the unexpected error
        domain_detection_failed+=($item)
        echo "WARNING: '$item' not found (Has been this VM removed?)"
    fi
done

if [[ -n ${backups_list[@]} ]]; then

    [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "$backup_action backup" "In progress for ${backups_list[@]}. Avoid to stop/restart this container until further notice"

    echo "Backing up: '${backups_list[@]}'"
    echo ""

    for domain in ${backups_list[@]}; do

        # Check and apply if necessary, retention policy prior to perform the backup:
        vm-retention-policy $domain

        # Under the specific scenario of new backup chain creation, forces shut off VM to start in paused mode:
        [[ ! -d $LOCAL_BACKUP_PATH/$domain || $(dir_is_empty $LOCAL_BACKUP_PATH/$domain) == yes ]] \
        && [[ $(domain_state $domain) == "shut off" && -z $(grep -o -e "-S" -e "--start-domain" <<< "$VIRTNBDBACKUP_ARGS") ]] \
            && start_domain="--start-domain"

        echo "____________________________________________________________________________________________________________"

        # Perform the backup operation:
        virtnbdbackup $start_domain -d $domain -l $backup_mode -o $LOCAL_BACKUP_PATH/$domain $VIRTNBDBACKUP_ARGS

        # Get last status for virtnbdbackup:
        virtnbdbackup_status=$?

        if [[ $virtnbdbackup_status -eq 0 ]]; then

            # Backup chain creation was successful!
            backup_chain_success+=($domain)
            echo "$domain: $backup_mode backup successfully finished"

        else
            # Failed to create a new backup chain:
            backup_chain_failed+=($domain)

            echo "WARNING: $domain: $backup_mode backup failed (status $virtnbdbackup_status)"

            # Grabs last failed status, if happens:
            backup_failed_status=$virtnbdbackup_status
        fi
    done

    if [[ -n ${backup_chain_success[@]} && -n $RSYNC_BACKUP_PATH ]]; then

        echo "Syncing backup chain(s): '${backup_chain_success[@]}'"
        echo ""

        for domain in ${backup_chain_success[@]}; do

            # Attempts to transfer changes via rsync:
            #rsync_backup $LOCAL_BACKUP_PATH/$domain $RSYNC_BACKUP_PATH/$domain
            vm-rsync $domain

            # Get last status for rsync:
            rsync_status=$?

            if [[ $rsync_status -eq 0 ]]; then

                # When rsync exited normally, adds the VM to $remote_sync_success:
                remote_sync_success+=($domain)
            else
                # Otherwise, adds the VM to $remote_sync_failed list:
                remote_sync_failed+=($domain)

                # Grabs last failed status, if happens:
                sync_failed_status=$rsync_status
            fi
        done
    fi

    # Display the summary:

    echo ""
    echo "____________________________________________________________________________________________________________"
    echo ""
    echo "$backup_action Backup Summary:"
    echo ""
    echo "Successful Backups: ${backup_chain_success[@]:-"None"}"
    echo "Failed Backups:     ${backup_chain_failed[@]:-"None"}"

    if [[ -n $RSYNC_BACKUP_PATH ]]; then

        # Only show remote stats when remote endppoint is set:
        echo ""
        echo "Synced to remote mirror:      ${remote_sync_success[@]:-"None"}"
        echo "Failed sync to remote mirror: ${remote_sync_failed[@]:-"None"}"
    fi

    if [[ -n ${domain_detection_failed[@]} ]]; then

        # Only show missing VMs when not detected:
        echo ""
        echo "Deleted or missing:           ${domain_detection_failed[@]:-"None"}"
    fi

    if [[ -z ${backup_chain_failed[@]} && -z ${remote_sync_failed[@]} && -z ${domain_detection_failed[@]} ]]; then

        echo ""
        echo "All Backup Chains Updated!"

        [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "$backup_action Backup" "Success"

    elif [[ $(os_is_unraid) == yes ]]; then

        [[ -n ${domain_detection_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "$backup_action backup finished, but found possible issues" "Could not detect the following VM(s): ${domain_detection_failed[@]} (might have been deleted?)"

        [[ -n ${backup_chain_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "$backup_action backup finished with errors (last status: $backup_failed_status)" "Could not perform backup(s) for: ${backup_chain_failed[@]}"

        [[ -n ${remote_sync_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Sync backup finished with errors (last status: $sync_failed_status)" "Could not sync backup chain(s) of: ${remote_sync_failed[@]}"

    fi

    # Update values to be exported:
    FAILED_VMS_LIST+=(${backup_chain_failed[@]})

    # Recreate SCHEDULED_BACKUPS_LIST based upon successful backups:
    SCHEDULED_BACKUPS_LIST=(${backup_chain_success[@]})

    # Sed can't expand arrays correctly. Convert variables into strings to be exported properly:
    FAILED_VMS_LIST="${FAILED_VMS_LIST[@]}"
    SCHEDULED_BACKUPS_LIST="${SCHEDULED_BACKUPS_LIST[@]}"

    # Export all variables, at the very end of the process:
    sed -i \
    -e "s/FAILED_VMS_LIST=.*/FAILED_VMS_LIST=($FAILED_VMS_LIST)/" \
    -e "s/SCHEDULED_BACKUPS_LIST=.*/SCHEDULED_BACKUPS_LIST=($SCHEDULED_BACKUPS_LIST)/" \
    $external_vars

else
    echo "No Virtual machines for $backup_action backup to process. Exited"
fi

    echo "############################################################################################################"
    echo "$backup_action backup ended at: $(date "+%Y-%m-%d %H:%M:%S")"
