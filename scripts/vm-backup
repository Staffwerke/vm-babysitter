#!/bin/bash

# Load common functions:
source $functions_path

case $1 in

    --run-schedule)

        backup_action="Scheduled"

        # Load SCHEDULED_BACKUPS_LIST from external variables list:
        source $external_vars

        # Virtnbdbackup mode is always auto:
        backup_mode="auto"

        # Processes initial backups list from SCHEDULED_BACKUPS_LIST:
        received_backups_list=(${SCHEDULED_BACKUPS_LIST[@]})

        # On scheduled mode, force '--no-color' for more clarity in log files:
        [[ -z $(grep -o -e "--no-color" <<< "$VIRTNBDBACKUP_ARGS") ]] \
            && VIRTNBDBACKUP_ARGS="$VIRTNBDBACKUP_ARGS --no-color"

        # Display initial message to append at logfile:
        echo ""
        echo "############################################################################################################"
        echo "$backup_action Backup started at: $(date "+%Y-%m-%d %H:%M:%S")"
    ;;

    *)
        backup_action="On-demand"

        # Virtnbdbackup mode is always auto (subject to change in future versions):
        backup_mode="auto"

        # Processes initial backups list from input:
        received_backups_list=($@)
    ;;
esac

# Checks all VMs before to be processed, discarding deleted VMs:
for item in ${received_backups_list[@]}; do
    if [[ $(domain_exists $item) == yes ]]; then

        # Add the VM to the main list:
        backups_list+=($item)

    else
        # Create a separated list of 'lost' VMs, and prompt about the unexpected error
        domain_detection_failed+=($item)
        echo "WARNING: VM '$item' not found (skipped)"
    fi
done

if [[ -n ${backups_list[@]} ]]; then

    # Notify via Unraid about the start of a scheduled process:
    [[ $backup_action == "Scheduled" && $(os_is_unraid) == yes ]] \
        && unraid_notify "normal" "VM-Babysitter" "$backup_action Backup" "In progress for ${backups_list[@]}. Avoid to stop/restart this container until further notice"

    [[ ${backups_list[@]} -ge 2 ]] \
        && echo "$backup_action Backup of: ${backups_list[@]} in progress..."

    for domain in ${backups_list[@]}; do

        echo "____________________________________________________________________________________________________________"

        # Check and apply if necessary, retention policy prior to perform the backup:
        vm-retention-policy $domain

        if [[ ! -d $LOCAL_BACKUP_PATH/$domain \
            || $(dir_is_empty $LOCAL_BACKUP_PATH/$domain) == yes ]] \
        && [[ $(domain_state $domain) == "shut off" \
            && -z $(grep -o -e "-S" -e "--start-domain" <<< "$VIRTNBDBACKUP_ARGS") ]]; then

            # Under specific scenario of new backup chain and powered off VMs, force --start-server to turn on the VM in paused mode:
            start_domain="--start-domain"
        fi

        echo "$domain: Running backup operation..."

        # Perform the backup operation:
        virtnbdbackup $start_domain -d $domain -l $backup_mode -o $LOCAL_BACKUP_PATH/$domain $VIRTNBDBACKUP_ARGS

        # Get last status for virtnbdbackup:
        virtnbdbackup_status=$?

        if [[ $virtnbdbackup_status -eq 0 ]]; then

            # Backup chain creation was successful!
            backup_chain_success+=($domain)
            echo "$domain: $backup_mode backup successfully finished"

        else
            # Failed to create a new backup chain:
            backup_chain_failed+=($domain)

            echo "WARNING: $domain: $backup_mode backup failed (status $virtnbdbackup_status)"
        fi
    done

    if [[ -n ${backup_chain_success[@]} && -n $RSYNC_BACKUP_PATH ]]; then

        if [[ ${backup_chain_success[@]} -ge 2 ]]; then

            echo "===========================================================================================================_"
            echo "Rsync of: ${backup_chain_success[@]} in progress..."
        fi

        for domain in ${backup_chain_success[@]}; do

            # Attempts to transfer changes via rsync:
            #rsync_backup $LOCAL_BACKUP_PATH/$domain $RSYNC_BACKUP_PATH/$domain
            vm-rsync $domain

            # Get last status for rsync:
            rsync_status=$?

            if [[ $rsync_status -eq 0 ]]; then

                # Rsync exited normally:
                rsync_success+=($domain)
            else
                # Rsync failed:
                rsync_failed+=($domain)
            fi
        done
    fi

else
    echo "No Virtual machines for $backup_action Backup to process (exited)"
fi

case $rsync_action in

    "Schedule")

        # Displays a brief summary:
        echo "____________________________________________________________________________________________________________"
        echo "$backup_action Backup Summary:"
        echo ""
        echo "Successful backups:    ${backup_chain_success[@]:-"None"}"
        echo "Failed backups:        ${backup_chain_failed[@]:-"None"}"
        echo "Skipped (no VM found): ${domain_detection_failed[@]:-"None"}"

        if [[ -n $RSYNC_BACKUP_PATH ]]; then

            # Only show remote stats when remote endppoint is set:
            echo "____________________________________________________________________________________________________________"
            echo "Rsync summary:"
            echo ""
            echo "Successful syncs:    ${rsync_success[@]:-"None"}"
            echo "Failed to sync:      ${rsync_failed[@]:-"None"}"
        fi

        if [[ $(os_is_unraid) == yes ]]; then

            # Notifies via Unraid about the results:
            if [[ -z ${backup_chain_failed[@]} \
                && -z ${rsync_failed[@]} \
                && -z ${domain_detection_failed[@]} ]]; then

                unraid_notify "normal" "VM-Babysitter" "$backup_action Backup" "Success"

            else
                [[ -n ${domain_detection_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "$backup_action backup finished, but found possible issues" "Could not detect the following VM(s): ${domain_detection_failed[@]} (might have been deleted?)"

                [[ -n ${backup_chain_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "$backup_action Backup finished with errors (last status: $backup_failed_status)" "Could not perform backup(s) for: ${backup_chain_failed[@]}"

                [[ -n ${rsync_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Rsync finished with errors" "Could not sync backup chain(s) of: ${rsync_failed[@]}"
            fi
        fi

        # Update values to be exported:
        FAILED_VMS_LIST+=(${backup_chain_failed[@]})

        # Recreate SCHEDULED_BACKUPS_LIST based upon successful backups:
        SCHEDULED_BACKUPS_LIST=(${backup_chain_success[@]})

        # Sed can't expand arrays correctly. Convert variables into strings to be exported properly:
        FAILED_VMS_LIST="${FAILED_VMS_LIST[@]}"
        SCHEDULED_BACKUPS_LIST="${SCHEDULED_BACKUPS_LIST[@]}"

        # Export all variables, at the very end of the process:
        sed -i \
        -e "s/FAILED_VMS_LIST=.*/FAILED_VMS_LIST=($FAILED_VMS_LIST)/" \
        -e "s/SCHEDULED_BACKUPS_LIST=.*/SCHEDULED_BACKUPS_LIST=($SCHEDULED_BACKUPS_LIST)/" \
        $external_vars

        echo "$backup_action backup ended at: $(date "+%Y-%m-%d %H:%M:%S")"
    ;;
esac


