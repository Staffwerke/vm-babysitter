#!/bin/bash

# Load common functions:
source $functions_path

case $1 in

    --run-schedule)

        # Performs backups (and other actions) as a scheduled task:
        backup_action="Scheduled"

        # Processes initial backups list from SCHEDULED_BACKUPS_LIST in external variables file:
        source $external_vars
        backups_list=(${SCHEDULED_BACKUPS_LIST[@]})

        # Virtnbdbackup mode is set to 'auto':
        backup_mode="auto"

        # On Scheduled mode, force '--no-color' for more clarity in log files:
        [[ -z $(grep -o -e "--no-color" <<< "$VIRTNBDBACKUP_ARGS") ]] \
            && VIRTNBDBACKUP_ARGS="$VIRTNBDBACKUP_ARGS --no-color"

        # Display initial message to be appended at logfile:
        echo ""
        echo "############################################################################################################"
        echo "$backup_action Backup started at: $(date "+%Y-%m-%d %H:%M:%S")"
    ;;

    --add-schedule)

            # Performs backups (and other actions) for first time, after initial checks:
            backup_action="Initial"
            shift

            # Virtnbdbackup mode is set to 'full':
            backup_mode="full"

            # Virtnbdbackup mode is set to 'auto':
            backup_mode="auto"

            # Processes initial backups list from VMs (as remaining arguments):
            backups_list=($@)
    ;;

    *)
            # Assumes 'On-demand' backup, triggered by the user:
            backup_action="On-demand"

            # Virtnbdbackup mode is set to 'auto':
            backup_mode="auto"

            # Processes initial backups list from VMs (as arguments):
            backups_list=($@)
    ;;
esac

if [[ -n ${backups_list[@]} ]]; then

    # Notify via Unraid about the start of a scheduled process:
    [[ $(os_is_unraid) == yes ]] \
        && unraid_notify "normal" "VM-Babysitter" "$backup_action Backup" "In progress for ${backups_list[@]}. Avoid to stop/restart this container until further notice"

    [[ ${backups_list[@]} -ge 2 ]] \
        && echo "$backup_action Backup of: ${backups_list[@]} in progress..."

    for domain in ${backups_list[@]}; do

        echo "____________________________________________________________________________________________________________"

        if [[ $(domain_exists $domain) == yes ]]; then

            # Check and apply if necessary, retention policy prior to perform the backup:
            vm-retention-policy $domain

            if [[ ! -d $LOCAL_BACKUP_PATH/$domain || $(dir_is_empty $LOCAL_BACKUP_PATH/$domain) == yes ]] \
            && [[ $(domain_state $domain) == "shut off" && -z $(grep -o -e "-S" -e "--start-domain" <<< "$VIRTNBDBACKUP_ARGS") ]]; then

                # Under specific scenario of new backup chain and powered off VMs, force --start-server to turn on the VM in paused mode:
                start_domain="--start-domain"
            fi

            echo "$domain: Running backup operation..."

            # Perform the backup operation:
            virtnbdbackup $start_domain -d $domain -l $backup_mode -o $LOCAL_BACKUP_PATH/$domain $VIRTNBDBACKUP_ARGS

            # Get last status for virtnbdbackup:
            virtnbdbackup_status=$?

            if [[ $virtnbdbackup_status -eq 0 ]]; then

                # Backup chain creation was successful!
                backup_success_list+=($domain)
                echo "$domain: $backup_mode backup successfully finished"

            else
                # Failed to create a new backup chain:
                backup_failed_list+=($domain)

                echo "WARNING: $domain: $backup_mode backup failed (status $virtnbdbackup_status)"
            fi
        done

    else
        # Create a separated list of 'lost' VMs, and prompt about the unexpected error
        backup_skipped_list+=($item)
        echo "$domain: There is no VM to backup (skipped)"
    fi

    if [[ -n ${backup_success_list[@]} && -n $RSYNC_BACKUP_PATH ]]; then

        # Activate rsync mode:
        rsync_mode=true

        if [[ ${backup_success_list[@]} -ge 2 ]]; then

            echo "===========================================================================================================_"
            echo "Rsync of: ${backup_success_list[@]} in progress..."
        fi

        for domain in ${backup_success_list[@]}; do

            # Attempts to transfer changes via rsync:
            #rsync_backup $LOCAL_BACKUP_PATH/$domain $RSYNC_BACKUP_PATH/$domain
            vm-rsync $domain

            # Get last status for rsync:
            rsync_status=$?

            if [[ $rsync_status -eq 0 ]]; then

                # Rsync exited normally:
                rsync_success_list+=($domain)
            else
                # Rsync failed:
                rsync_failed_list+=($domain)
            fi
        done
    fi

else
    echo "No Virtual machines for $backup_action Backup to process (exited)"
fi

case $backup_action in

    "Initial")

        # Append VMs to the correspondent lists to be exported:
        FAILED_VMS_LIST+=(${backup_failed_list[@]})
        SCHEDULED_BACKUPS_LIST+=(${backup_success_list[@]})

        # Export all variables:
        sed -i \
        -e "s/FAILED_VMS_LIST=.*/FAILED_VMS_LIST=(${FAILED_VMS_LIST[@]})/" \
        -e "s/SCHEDULED_BACKUPS_LIST=.*/SCHEDULED_BACKUPS_LIST=(${SCHEDULED_BACKUPS_LIST[@]})/" \
        $external_vars

        # Show results on screen and log file:
        display_summary
    ;;

    "Schedule")

        # Load SCHEDULED_BACKUPS_LIST FAILED_VMS_LIST again,
        # in case other VMs were added during this run:
        source $external_vars

        # TO DO: Update variables to be exported based on results....

        # Show results into log file:
        display_summary
        echo "$backup_action Backup ended at: $(date "+%Y-%m-%d %H:%M:%S")"

    ;;

    "On-demand")

        # Nothing else to do or report:
        echo "Finished"
    ;;
esac

display_summary()
{
    echo "____________________________________________________________________________________________________________"
    echo "$backup_action Backup Summary:"
    echo ""
    echo "Successful backups:    ${backup_success_list[@]:-"None"}"
    echo "Failed backups:        ${backup_failed_list[@]:-"None"}"
    echo "Skipped (missing VMs): ${backup_skipped_list[@]:-"None"}"

    if [[ $rsync_mode == true ]]; then

        # Only show remote stats when remote endppoint is set:
        echo "____________________________________________________________________________________________________________"
        echo "$backup_action Rsync summary:"
        echo ""
        echo "Successful syncs: ${rsync_success_list[@]:-"None"}"
        echo "Failed to sync:   ${rsync_failed_list[@]:-"None"}"
    fi

    if [[ $(os_is_unraid) == yes ]]; then

        # Notifies via Unraid about the results:
        if [[ -z ${backup_failed_list[@]} \
            && -z ${rsync_failed_list[@]} \
            && -z ${backup_skipped_list[@]} ]]; then

            unraid_notify "normal" "VM-Babysitter" "$backup_action Backup" "Finished Successfully"

        else
            [[ -n ${backup_skipped_list[@]} ]] \
                && unraid_notify "warning" "VM-Babysitter" "$backup_action Backup" "Unable to find VM(s): ${backup_skipped_list[@]} and therefore removed from schedule (maybe deleted by the user?) "

            [[ -n ${backup_failed_list[@]} ]] \
                && unraid_notify "warning" "VM-Babysitter" "$backup_action Backup finished with errors" "Could not perform backup(s) for: ${backup_failed_list[@]}"

            [[ -n ${rsync_failed_list[@]} ]] \
                && unraid_notify "warning" "VM-Babysitter" "$backup_action Rsync finished with errors" "Could not sync backup chain(s) of: ${rsync_failed_list[@]}"
        fi
    fi
}

