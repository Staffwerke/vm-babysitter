#!/bin/bash

# NOTE:
# - Static variables are set declared in crontab
# - Dynamic variables are read and written onto $external_vars file

# Internal global variables and common functions are managed via this script:
source $functions_path

# And SCHEDULED_BACKUPS_LIST is loaded from file (written by the main script):
source $external_vars
#------------------------------------------------------------------------------

case $1 in

    run-schedule)

        backup_action="Scheduled"
        backup_mode="auto"
        backups_list=(${SCHEDULED_BACKUPS_LIST[@]})
        log_path=$SCHEDULE_LOGFILE_PATH
    ;;

    *)
        backup_action="On-demand"
        backup_mode="auto"
        for item in $@; do
            [[ $(domain_exists $item) == yes ]] && backups_list+=($item)
        done

        log_path=$LOGFILE_PATH
    ;;
esac

# Redirect system stdout and stderr to log_path:
exec > >(tee -a $log_path) 2> >(tee -a $log_path >&2)

echo "############################################################################################################"
echo "$backup_action backup started at: $(date "+%Y-%m-%d %H:%M:%S")"

if [[ -n ${backups_list[@]} ]]; then

    [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "$backup_action Backup" "In progress for ${backups_list[@]}. Avoid to stop/restart this container until further notice"

    echo "Virtual machines: '${backups_list[@]}'"
    echo ""

    i=0
    for domain in ${backups_list[@]}; do

        echo "____________________________________________________________________________________________________________"


        [[ ! -d $LOCAL_BACKUP_PATH/$domain || $(dir_is_empty $LOCAL_BACKUP_PATH/$domain) == yes ]] \
        && [[ $(domain_state $domain) == "shut off" && -z $(grep -o -e "-S" -e "--start-domain" <<< "$VIRTNBDBACKUP_ARGS") ]] \
            && start_domain="--start-domain"

        # Do backup now:
        do_backup_chain $start_domain $domain $backup_mode $LOCAL_BACKUP_PATH $VIRTNBDBACKUP_ARGS

        # Get last status for virtnbdbackup:
        virtnbdbackup_status=$?

        if [[ $virtnbdbackup_status -eq 0 ]]; then

            # Backup chain creation was successful!
            backup_chain_success[$i]=$domain

        else
            # Failed to create a new backup chain:
            backup_chain_failed[$i]=$domain
        fi

        if [[ ${backup_chain_success[$i]} == $domain && -n $RSYNC_BACKUP_PATH ]]; then

            # Incremental backup was successful and remote endpoint is (correctly) set,
            # attempts to transfer changes via rsync:
            rsync_backup $LOCAL_BACKUP_PATH/$domain $RSYNC_BACKUP_PATH/$domain

            # Get last status for rsync:
            rsync_status=$?

            if [[ $rsync_status -eq 0 ]]; then

                # When rsync exited normally, adds the VM to $remote_sync_success:
                remote_sync_success[$i]+=$domain
            else
                # Otherwise, adds the VM to $remote_sync_failed list:
                remote_sync_failed[$i]+=$domain
            fi
        fi

        # Increases the index to check the next VM:
        ((i++))
    done

    # Display the summary:

    echo ""
    echo "____________________________________________________________________________________________________________"
    echo ""
    echo "$backup_action Backup Summary:"
    echo ""
    echo "Successful Backups: ${backup_chain_success[@]:-"None"}"
    echo "Failed Backups:     ${backup_chain_failed[@]:-"None"}"

    if [[ -n $RSYNC_BACKUP_PATH ]]; then

        # Only show remote stats when remote endppoint is set:
        echo ""
        echo "Synced to remote mirror:      ${remote_sync_success[@]:-"None"}"
        echo "Failed sync to remote mirror: ${remote_sync_failed[@]:-"None"}"
    fi

    if [[ -z ${backup_chain_failed[@]} && -z ${remote_sync_failed[@]} ]]; then

        echo ""
        echo "All Backup Chains Updated!"

        [[ $(os_is_unraid) == yes ]] && unraid_notify "normal" "VM-Babysitter" "Backup chain update" "Success"

    elif [[ $(os_is_unraid) == yes ]]; then

        [[ -n ${backup_chain_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Virtnbdbackup failed (last status: $virtnbdbackup_status)" "Could not update backup chain(s) for: ${backup_chain_failed[@]} therefore removed from scheduled backups"

        [[ -n ${remote_sync_failed[@]} ]] && unraid_notify "warning" "VM-Babysitter" "Rsync failed (last status: $rsync_status)" "Could not sync backup chain(s) of: ${remote_sync_failed[@]} (Will be re-attempted on next schedule)"
    fi

    echo ""
    echo "############################################################################################################"
    echo "$backup_action Backup ended at: $(date "+%Y-%m-%d %H:%M:%S")"
    echo ""

    # Update values to be exported:
    FAILED_VMS_LIST+=(${backup_chain_failed[@]})

    # Recreate SCHEDULED_BACKUPS_LIST based upon successful backups:
    SCHEDULED_BACKUPS_LIST=(${backup_chain_success[@]})

    # Sed can't expand arrays correctly. Convert variables into strings to be exported properly:
    FAILED_VMS_LIST="${FAILED_VMS_LIST[@]}"
    SCHEDULED_BACKUPS_LIST="${SCHEDULED_BACKUPS_LIST[@]}"

    # Export all variables, at the very end of the process:
    sed -i \
    -e "s/FAILED_VMS_LIST=.*/FAILED_VMS_LIST=($FAILED_VMS_LIST)/" \
    -e "s/SCHEDULED_BACKUPS_LIST=.*/SCHEDULED_BACKUPS_LIST=($SCHEDULED_BACKUPS_LIST)/" \
    $external_vars

else
    echo "No Virtual machines for $backup_action backup to process. Exited"
fi
