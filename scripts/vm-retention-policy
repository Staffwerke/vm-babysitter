#!/bin/bash

# Usage:
# vm-retention-policy <vm-name1> [vm-name2]...
# - Checks backups lifecyle based MAX_BACKUPS_PER_CHAIN, archiving it when reaches that number of checkpoints
# - Applies retention policy, based on LOCAL|RSYNC_BACKUP_CHAINS_TO_KEEP, keeping as many (and most recent) backup chains on each endpoint, deleting the older ones.

# Load common functions:
source $functions_path

# Processes initial backups list from VMs (passed as arguments):
retention_list=($@)

if [[ -n ${retention_list[@]} ]]; then

    # When processing batches, notify first which backups will be processed:
    [[ ${#retention_list[@]} -ge 2 ]] \
        && echo "Retention Policy of VMs backups: ${retention_list[@]} in progress..."

    for domain in ${retention_list[@]}; do

        # (Re)Initialize used variables:
        end_of_lifecycle=""
        additional_message=""

        if [[ -n $MAX_BACKUPS_PER_CHAIN && $MAX_BACKUPS_PER_CHAIN -gt 0 ]]; then

            # Retention policy is set (at least, partially) by the user.
            if [[ -d $LOCAL_BACKUP_PATH/$domain ]]; then

                # Retrieve the number of existing checkpoints in the backup chain:
                num_of_backup_checkpoints=$(backup_checkpoint_list $LOCAL_BACKUP_PATH/$domain --num)

                case $num_of_backup_checkpoints in

                    0)
                        # '0' checkpoints means it's a 'copy' backup:
                        end_of_lifecycle=true
                        echo "$domain: Current backup was made in 'copy' mode and cannot be used for incremental backups. This backup chain will be archived"
                    ;;

                    *)
                        # Any other positive integer number it's the current number of checkpoints present into the backup chain.
                        # Check if it has reached the maximum allowed:
                        if [[ $num_of_backup_checkpoints -ge $MAX_BACKUPS_PER_CHAIN ]]; then

                            # Backup has reached the max allowed checkpoints and must be archived:
                            end_of_lifecycle=true
                            additional_message=". This backup chain will be archived"
                        fi

                        echo "$domain: Detected $num_of_backup_checkpoints of max allowed $MAX_BACKUPS_PER_CHAIN checkpoints$additional_message"
                    ;;
                esac

                if [[ $end_of_lifecycle == true ]]; then

                    # Processes backup for being archived locally:
                    archive_backup $LOCAL_BACKUP_PATH/$domain $LOCAL_BACKUP_CHAINS_TO_KEEP

                    # And remotely, if set:
                    [[ -n $RSYNC_BACKUP_PATH ]] && archive_remote_backup $RSYNC_BACKUP_PATH/$domain $RSYNC_BACKUP_CHAINS_TO_KEEP
                fi

            else
                echo "$domain: No backup found at $LOCAL_BACKUP_PATH to apply"
            fi

        else
            echo "$domain: Retention policy is currently disabled by user"
        fi

    done

else
    echo "No Virtual machines for Retention Policy to apply (exited)"
fi
