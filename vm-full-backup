#!/bin/bash

# Creates a first full backup of a given VM at determined path
# Only proceeds when VM is running, and has no previous backups
# Will prompt the user about delete existing backups.

# -----------------------------------------------------------------------------
# VM name as of registered in libvirt/qemu:
target_domain=$1

# Backup location
backup_path=$2

# Runs a volatile container that executes virtnbdbackup with specific options:
# -----------------------------------------------------------------------------
virtnbdbackup_docker_full_backup()
{

# Docker source image:
local src_image="adrianparilli/virtnbdbackup-docker:latest"

# Backup Mode:
local backup_mode="full"

# Extra options passed to virtnbdbackup:
local options=" --compress"

# Common bind mounts for all Operating Systems:
local bind_mounts=" -v $backup_path:$backup_path -v /var/tmp:/var/tmp"

# Filters kernel with matching string "Unraid" and pass specific mount points. By now, all other Operating systems are mounted in the same way:
[[ -n `uname  -r | grep -e "-Unraid$"` ]] && bind_mounts+=" -v /var/run:/run -v /var/lock:/run/lock" || bind_mounts+=" -v /run:/run"

# Notifies the user about the ongoing process:
echo "INFO: Starting a FULL backup of $target_domain at $backup_path/$target_domain"
echo "This may take some time, or even look freezed..."

# Runs Docker!
    docker run --rm $bind_mounts $src_image virtnbdbackup -d $target_domain -l $backup_mode -o $backup_path/$target_domain $options

}

# Main execution:
# -----------------------------------------------------------------------------

# Verifies for target_domain, in first instance:
# (Attempts to match " exact " case)
domain_exists=`virsh list --all | grep -w " $target_domain "`

# Will change to 0 only when operation compeltes successfully:
status=1

if [[ ! -z $domain_exists ]]; then

    # Verifies if $target_domain is running:
    domain_state=`echo $domain_exists | grep -ow "running"`

    if [[ $domain_state == "running" ]]; then

        # Checks for existing $target_domain folder in $backup_path:
        if [[ -d $backup_path/$target_domain ]]; then

            folder_exists=1
            # And contents inside:
             if [[ ! -z `ls -a $backup_path/$target_domain` ]]; then

                # Virtnbdbackup will fail if folder is not empty, so user action is required:
                echo "WARNING: $backup_path/$target_domain was already initialized, and probably has backups!"
                read -p "Do you want to DELETE EVERYTHING inside this folder (including previous backups, if exist) and create a NEW backup-chain for $target_domain [yes/no]?: " key

                while true; do
                    case $key in
                        yes)
                            rm -rf $backup_path/$target_domain
                            echo "$backup_path/$target_domain purged."
                            break
                        ;;
                        no)
                            echo "INFO: No actions will be performed. Check $backup_path/$target_domain for backups, logs and checkpoints. Rename if necessary before to create a new backup chain. (Aborted by the user)"
                            status=0
                            break
                        ;;
                        *)
                            read -p "Please, write 'yes' or 'no': " key
                        ;;
                    esac
                done
            fi
        fi

        # Will only proceeds when: There wasn't a previous folder or 2) User asked to deleted previos existing one:
        if [[ ! $folder_exists ]] || [[ $key == "yes" ]]; then

            # Runs virtnbdbackup:
            virtnbdbackup_docker_full_backup
            status=$?
            [[ $status == 0 ]] && message="INFO: virtnbdbackup finished successfully and $target_domain can be backed up with incremental backups at $backup_path/$target_domain" || message="ERROR: virtnbdbackup exited with status $status. Read the logs above to determine the problem."
        fi

    else
        # $target_domain state is anything rather than "running"
        message="ERROR: $target_domain isn't running. Backup jobs only apply for running VMs. Aborted."
    fi

else
     # VM does not exist:
    message="ERROR: $target_domain doesn't exist. Aborted."
fi

echo $message
exit $status
